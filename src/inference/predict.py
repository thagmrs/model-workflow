import os
import json
import boto3
import pandas as pd
import joblib
import numpy as np
import warnings
from fastapi import FastAPI, HTTPException, Header, Depends
from pydantic import BaseModel

warnings.filterwarnings("ignore", message="joblib will operate in serial mode")

# -----------------------------------------------------
# Configura√ß√µes
# -----------------------------------------------------
s3 = boto3.client("s3")

MODEL_BUCKET = os.environ["ARTIFACTS_BUCKET"]
MODEL_KEY = os.environ.get("MODEL_KEY", "models/latest/model.joblib")
LOCAL_MODEL_PATH = "/tmp/model.joblib"
API_KEY = os.environ.get("API_KEY", "thais-secret-123")

app = FastAPI(
    title="Property Price Predictor API",
    description="""
API de infer√™ncia de pre√ßos imobili√°rios treinada com GradientBoostingRegressor.

Esta API permite:
- Prever o pre√ßo de um im√≥vel com base em suas caracter√≠sticas.
- Checar o status do container via rota `/health`.
- Acessar documenta√ß√£o interativa em `/docs` (Swagger UI).
""",
    version="2.0.0"
)

model = None
last_modified = None

# -----------------------------------------------------
# Modelo de entrada (Pydantic)
# -----------------------------------------------------
class Features(BaseModel):
    type: str
    sector: str
    net_usable_area: float
    net_area: float
    n_rooms: float
    n_bathroom: float
    latitude: float
    longitude: float

# -----------------------------------------------------
# Fun√ß√£o de carregamento do modelo
# -----------------------------------------------------
def load_model():
    """Baixa e mant√©m em cache o modelo mais recente do S3."""
    global model, last_modified
    try:
        head = s3.head_object(Bucket=MODEL_BUCKET, Key=MODEL_KEY)
        modified = head["LastModified"]

        if model is None or last_modified != modified:
            print(f"üîÅ Baixando modelo atualizado: {MODEL_KEY}")
            s3.download_file(MODEL_BUCKET, MODEL_KEY, LOCAL_MODEL_PATH)
            model = joblib.load(LOCAL_MODEL_PATH)
            last_modified = modified
            print(f"‚úÖ Modelo carregado ({modified})")
        return model
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao carregar modelo: {e}")

# -----------------------------------------------------
# Rotas da API
# -----------------------------------------------------

@app.get("/health", summary="Verifica o status da API")
def health_check():
    """Retorna o status da API e se o modelo est√° carregado."""
    try:
        _ = load_model()
        return {
            "status": "healthy",
            "service": "predictor",
            "model_loaded": model is not None,
            "model_key": MODEL_KEY,
        }
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}


@app.post(
    "/predict",
    summary="Realiza a predi√ß√£o de pre√ßo",
)
def predict(features: Features):
    """Recebe as features e retorna o valor previsto."""
    try:
        df = pd.DataFrame([features.dict()])  # input ‚Üí DataFrame
        m = load_model()                      # carrega modelo atualizado
        preds = m.predict(df)                 # realiza infer√™ncia

        result = {
            "status": "ok",
            "prediction": float(preds[0]),
            "model_version": last_modified.isoformat(),
        }

        print("‚úÖ Resultado:", result)
        return result
    except Exception as e:
        print(f"‚ùå Erro na predi√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na predi√ß√£o: {e}")

# -----------------------------------------------------
# Execu√ß√£o local (para debug)
# -----------------------------------------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)
